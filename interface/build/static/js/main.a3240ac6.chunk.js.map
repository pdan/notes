{"version":3,"sources":["actions/index.js","reducers/reducer_notes.js","reducers/index.js","containers/Notes.js","components/Root.js","components/Alert.js","components/Auth.js","components/Signin.js","components/SecuredRoute.js","components/Application.js","serviceWorker.js","index.js"],"names":["GET_NOTES_LIST","GET_NOTES_LIST_ERROR","fetchNotesList","_x","_fetchNotesList","apply","this","arguments","_callee","page","response","data","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","abrupt","type","payload","t0","stop","rootReducer","combineReducers","notesList","state","length","undefined","action","Object","objectSpread","error","Notes","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","content","addNote","bind","assertThisInitialized","e","preventDefault","method","headers","Content-Type","body","JSON","stringify","setState","console","log","map","i","react_default","createElement","key","_this2","className","onSubmit","placeholder","rows","value","onChange","target","Component","connect","dispatch","bindActionCreators","Root","containers_Notes","withRouter","Alert","_ref","message","auth","Math","floor","Date","getTime","sessionStorage","getItem","token","split","parse","atob","setItem","userID","expireDate","document","cookie","concat","toUTCString","clear","Signin","email","password","alert","sign","Auth","signIn","history","push","components_Alert","name","SecuredRoute","component","path","exact","Route","render","isAuthenticated","window","location","href","App","store","es","BrowserRouter","components_SecuredRoute","Boolean","hostname","match","applyMiddleware","ReduxPromise","createStore","createStoreWithMiddleware","reducers","ReactDOM","Application","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3240ac6.chunk.js","sourcesContent":["export const GET_NOTES_LIST = 'GET_NOTES_LIST';\nexport const GET_NOTES_LIST_ERROR = 'GET_NOTES_LIST_ERROR';\n\nexport async function fetchNotesList(page) {\n  try {\n    const response = await fetch(`/api/note/list`);\n    let data = await response.json();\n\n    return {\n      type: GET_NOTES_LIST,\n      payload: data\n    }\n  } catch (error) {\n    return {\n      type: GET_NOTES_LIST_ERROR,\n      payload: error\n    }\n  }\n}","import { GET_NOTES_LIST, GET_NOTES_LIST_ERROR } from '../actions';\n\n\nexport default function (state = {}, action) {\n\n  switch (action.type) {\n    case GET_NOTES_LIST:\n      return { ...state, json: action.payload };\n    case GET_NOTES_LIST_ERROR:\n      return { ...state, error: action.payload };\n    default:\n      /* code */\n      break;\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport reducerNotes from './reducer_notes';\n\n\nconst rootReducer = combineReducers({\n  notesList: reducerNotes\n});\n\nexport default rootReducer;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { fetchNotesList } from '../actions/index';\n\nclass Notes extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      content: ''\n    }\n\n    this.addNote = this.addNote.bind(this)\n  }\n\n  componentDidMount() {\n    this.props.fetchNotesList('')\n\n  }\n\n  async addNote(e) {\n    e.preventDefault();\n    if (!this.state.content) {\n      return\n    }\n\n    try {\n      const response = await fetch('/api/note', {\n        method: 'put',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ content: this.state.content })\n      });\n      this.setState({ content: '' })\n      this.props.fetchNotesList('')\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  notesList() {\n\n    if (this.props.notesList === undefined) {\n      return\n    }\n\n    return this.props.notesList.map((data, i) => {\n      return <div key={i}>{i + ' - '+data.content}</div>\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"notes\">\n          <div className=\"list\">\n              {this.notesList()}\n            </div>\n            <form className=\"add-note\" onSubmit={this.addNote}>\n              <label>\n                What books did you read over summer break?\n                <textarea placeholder=\"Write down here\" rows=\"3\" value={this.state.content} onChange={e => this.setState({content: e.target.value})}></textarea>\n                <button type=\"submit\" className=\"button primary\">Submit</button>\n              </label>\n            </form>\n          </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { notesList: state.notesList.json }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchNotesList }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Notes from '../containers/Notes';\n\nclass Root extends Component {\n  \n  render() {\n    return (\n      <div className=\"grid-container\">\n        <div className=\"grid-x\">\n          <header className=\"header\"> </header>\n        </div>\n        <div className=\"grid-x\">\n          <div className=\"cell medium-8 medium-offset-2 large-6 large-offset-3\">\n            <div className=\"portlet\">\n              <Notes />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Root);\n","import React from 'react';\n\nconst Alert = ({ message }) => {\n  if (message === '' || message === undefined) {\n    return ('')\n  }\n  return (\n    <div className=\"alert\">\n      <div className=\"grid-container\">\n        {message}\n      </div>\n    </div>\n  )\n}\n\nexport default Alert\n","class Auth {\n  isAuthenticated() {\n    return Math.floor(new Date().getTime() / 1000) < sessionStorage.getItem('expireDate');\n  }\n\n  signIn(token) {\n    var data = token.split(\".\")[1]\n    data = JSON.parse(atob(data))\n    sessionStorage.setItem('userID', data.userID);\n    sessionStorage.setItem('expireDate', data.expireDate);\n    sessionStorage.setItem('token', token);\n    document.cookie = `token=${token}; expires=${new Date(data.expireDate*1000).toUTCString()}; path=/`;\n  }\n\n  signOut() {\n    sessionStorage.clear()\n  }\n}\n\nconst auth = new Auth();\n\nexport default auth;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Alert from './Alert';\nimport Auth from './Auth';\n\nclass Signin extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      email: '',\n      password: '',\n      alert: ''\n    }\n\n    this.sign = this.sign.bind(this)\n  }\n  async sign(e) {\n    e.preventDefault();\n\n    try {\n      const response = await fetch('/api/user/signin', {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: this.state.email,\n          password: this.state.password\n        })\n      })\n      const data = await response.json()\n      if (!data.token)\n        throw data\n      Auth.signIn(data.token)\n      this.props.history.push('/')\n\n    } catch (error) {\n      this.setState({ alert: error.message })\n    }\n\n  }\n  render() {\n    return (\n      <div className=\"grid-container\">\n        <Alert message={this.state.alert}/>\n        <div className=\"grid-x\">\n          <header className=\"header\"> </header>\n        </div>\n        <div className=\"grid-x\">\n          <div className=\"cell medium-4 medium-offset-4 large-4 large-offset-4\">\n            <div className=\"portlet\">\n              <form onSubmit={this.sign}>\n                  <input type=\"email\" name=\"email\" placeholder=\"Email\" value={this.state.email} onChange={e => this.setState({email: e.target.value})} />\n                  <input type=\"password\" name=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({password: e.target.value})} />\n                  <button type=\"submit\" className=\"button primary\">Sign</button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Signin);\n","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport auth from './Auth';\n\nfunction SecuredRoute(props) {\n  const {component: Component, path, exact} = props;\n  return (\n    <Route exact={exact} path={path} render={() => {\n        if (!auth.isAuthenticated()) {\n            window.location.href = '/user/signin'\n          return <div></div>;\n        }\n        return <Component />\n    }} />\n  );\n}\n\nexport default SecuredRoute;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nimport Root from './Root';\nimport Signin from './Signin';\nimport SecuredRoute from './SecuredRoute';\n\nconst App = ({ store }) => (\n  <Provider store={store}>\n    <Router>\n      <div className=\"app-container\">\n          {/* <SecuredRoute path=\"/projects\" component={Projects} />\n          <SecuredRoute path=\"/project/:id\" component={Project} />\n          <Route path=\"/user/signin\" component={Signin} />\n          <Route path=\"/user/signup\" component={Signup} /> */}\n          {/* <Redirect from=\"/\" to=\"/notes\" /> */}\n          <SecuredRoute exact={true} path=\"/\" component={Root} />\n          <Route path=\"/user/signin\" component={Signin} />\n      </div>\n    </Router>\n  </Provider>\n)\n\nApp.propTypes = {\n  store: PropTypes.object.isRequired\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport reducers from './reducers';\nimport App from './components/Application';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\nconst store = createStoreWithMiddleware(reducers);\n\nReactDOM.render(<App store={ store } />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}