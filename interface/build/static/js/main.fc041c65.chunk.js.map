{"version":3,"sources":["actions/index.js","reducers/reducer_notes.js","reducers/index.js","containers/Notes.js","components/Root.js","components/Application.js","serviceWorker.js","index.js"],"names":["GET_NOTES_LIST","GET_NOTES_LIST_ERROR","fetchNotesList","_x","_fetchNotesList","apply","this","arguments","_callee","page","response","data","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","abrupt","type","payload","t0","stop","rootReducer","combineReducers","notesList","state","length","undefined","action","Object","objectSpread","error","Notes","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","content","addNote","bind","assertThisInitialized","e","preventDefault","method","headers","Content-Type","body","JSON","stringify","setState","console","log","map","i","react_default","createElement","key","_this2","className","placeholder","rows","value","onChange","target","onClick","Component","connect","dispatch","bindActionCreators","Root","containers_Notes","withRouter","App","_ref","store","es","BrowserRouter","Route","path","component","Boolean","window","location","hostname","match","applyMiddleware","ReduxPromise","createStore","createStoreWithMiddleware","reducers","ReactDOM","render","Application","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc041c65.chunk.js","sourcesContent":["export const GET_NOTES_LIST = 'GET_NOTES_LIST';\nexport const GET_NOTES_LIST_ERROR = 'GET_NOTES_LIST_ERROR';\n\nexport async function fetchNotesList(page) {\n  try {\n    const response = await fetch(`/api/note/list`);\n    let data = await response.json();\n\n    return {\n      type: GET_NOTES_LIST,\n      payload: data\n    }\n  } catch (error) {\n    return {\n      type: GET_NOTES_LIST_ERROR,\n      payload: error\n    }\n  }\n}","import { GET_NOTES_LIST, GET_NOTES_LIST_ERROR } from '../actions';\n\n\nexport default function (state = {}, action) {\n\n  switch (action.type) {\n    case GET_NOTES_LIST:\n      return { ...state, json: action.payload };\n    case GET_NOTES_LIST_ERROR:\n      return { ...state, error: action.payload };\n    default:\n      /* code */\n      break;\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport reducerNotes from './reducer_notes';\n\n\nconst rootReducer = combineReducers({\n  notesList: reducerNotes\n});\n\nexport default rootReducer;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { fetchNotesList } from '../actions/index';\n\nclass Notes extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      content: ''\n    }\n\n    this.addNote = this.addNote.bind(this)\n  }\n\n  componentDidMount() {\n    this.props.fetchNotesList('')\n    \n  }\n\n  async addNote(e) {\n    e.preventDefault();\n    if (!this.state.content) {\n      return\n    }\n    \n      try {\n        const response = await fetch(`/api/note`, {\n          method: 'put',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({content: this.state.content})\n        });\n        this.setState({content: ''})\n        this.props.fetchNotesList('')\n        \n      } catch (error) {\n        console.log(error)\n      }\n  }\n\n  notesList() {\n    \n    if (this.props.notesList === undefined) {\n      return\n    }\n    \n    return this.props.notesList.map((data, i) => {\n      return <div key={i}>{i + ' - '+data.content}</div>\n    })\n  }\n\n  render() {\n      return (\n          <div className=\"notes\">\n            <form className=\"add-note\">\n              <label>\n                What books did you read over summer break?\n                <textarea placeholder=\"Write down here\" rows=\"3\" value={this.state.content} onChange={e => this.setState({content: e.target.value})}></textarea>\n                <button type=\"submit\" className=\"button primary\" onClick={this.addNote}>Submit</button>\n              </label>\n            </form>\n          \n            <div className=\"list\">\n              {this.notesList()}\n            </div>\n          </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { notesList: state.notesList.json }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchNotesList }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);\n\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Notes from '../containers/Notes';\n\nclass Root extends Component {\n  \n  render() {\n    return (\n      <div className=\"grid-container\">\n        <div className=\"grid-x\">\n          <header className=\"header\"> </header>\n        </div>\n        <div className=\"grid-x\">\n          <div className=\"cell medium-8 medium-offset-2 large-6 large-offset-3\">\n            <div className=\"portlet\">\n              <Notes />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Root);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Root from './Root';\n// import SecuredRoute from './SecuredRoute';\n\nconst App = ({ store }) => (\n  <Provider store={store}>\n    <Router>\n      <div className=\"app-container\">\n          {/* <SecuredRoute path=\"/projects\" component={Projects} />\n          <SecuredRoute path=\"/project/:id\" component={Project} />\n          <Route path=\"/user/signin\" component={Signin} />\n          <Route path=\"/user/signup\" component={Signup} /> */}\n\n          <Route path=\"/\" component={Root} />\n      </div>\n    </Router>\n  </Provider>\n)\n\nApp.propTypes = {\n  store: PropTypes.object.isRequired\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport reducers from './reducers';\nimport App from './components/Application';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\nconst store = createStoreWithMiddleware(reducers);\n\nReactDOM.render(<App store={ store } />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}